`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Margot Bauman
// 
// Create Date: 11/18/2019 10:20:13 AM
// Design Name: 
// Module Name: reservation_station
// Project Name: Tulong
// Target Devices: 
// Tool Versions: 
// Description: Reservation Station for functional units
// 
// Dependencies: takes in destination register (if applicable), immediate or operand B (if latter,
// from source register 2), operand A (value in source register 1), an instruction valid bit, and
// a vaild bit for each operand (need one for destination register to prevent some hazards?)
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments: Outputs valid bits when all are true to priority encoders, one fed
// by two nor gates and one fed by two and gates. Former outputs address of first empty
// slot (in reservation station?), latter feeds functional unit
// 
//////////////////////////////////////////////////////////////////////////////////


module reservation_station #(
parameter CORE = 0,
parameter DATA_WIDTH = 32,
parameter ADDRESS_BITS = 32,
parameter TAG_BITS = 15,
parameter OPCODE_WIDTH = 7
) ( // input inst_valid, dest_reg_valid, // inst_valid = busy bit
 // input [13:0] tag, // tag = opcode then funct3 then ordinal of this inst type
  //eg: third load word would be: 0000_0110_1000_11 bc opcode = 0000_011, f3 = 010
  input [31:0] instruction,
  input [ADDRESS_BITS-1:0] address_in,
  input [DATA_WIDTH-1:0] operand_A, operand_B,
  output inst_valid_out,
  output op_A_valid_out,
  output op_B_valid_out  
    );

//reg busy_arr[3:0]; // if busy_arr[index] = 1, corresponding res station line in use
wire opcode = instruction[6:0];
wire funct3 = instruction[14:12];
wire op_A_rs = instruction[19:15];
wire op_B_rs = instruction[24:20];
wire [1:0] ordinal;
wire [TAG_BITS-1:0] tag; //busy bit, rename (opocde, funct3, oridinal 0-3)
wire [TAG_BITS-1:0] op_A_loc, op_B_loc, rd; //how get tags from reg numbers - need to have i/p?
wire [ADDRESS_BITS-1:0] effective_address_init, effective_address;
wire [DATA_WIDTH-1:0] operand_A_value, operand_B_value;
wire inst_valid, operand_A_valid, operand_B_valid, dest_reg_valid;//inst & dest wires or inputs?
  
  localparam RESERVATION_ENTRY_WIDTH = TAG_BITS // tag for res station entry inst (opcode + funct3 + ordinal)
                                    + OPCODE_WIDTH //
                                    + DATA_WIDTH // value of operand_A
                                    + DATA_WIDTH // value of operand_B
                                    + TAG_BITS // tag of operand_A source (op_A_loc)
                                    + 1 //oparand_A_valid
                                    + TAG_BITS // tag of operand_B source (op_B_loc)
                                    + 1 //operand_B_valid
                                    + ADDRESS_BITS //effective address for load/store - may be immed only initially
                                    + 1; // dest_reg_valid 0 when just immed, 1 when desired address
                                    
  localparam ENTRY_OUT_WIDTH = TAG_BITS
                            + OPCODE_WIDTH
                            + 3 //funct3
                            + DATA_WIDTH
                            + DATA_WIDTH
                            + ADDRESS_BITS;                                  
                                    
localparam [6:0]R_TYPE  = 7'b0110011,
                I_TYPE  = 7'b0010011,
                STORE   = 7'b0100011,
                LOAD    = 7'b0000011,
                BRANCH  = 7'b1100011,
                JALR    = 7'b1100111,
                JAL     = 7'b1101111,
                AUIPC   = 7'b0010111,
                LUI     = 7'b0110111,
                FENCES  = 7'b0001111,
                SYSCALL = 7'b1110011;

assign operand_A_valid = op_A_loc[14] == 1 ? 0 : 1; //if op_A_loc busy high, op_A_valid 0, so wait
assign operand_B_valid = op_B_loc[14] == 1 ? 0 : 1; //as above for op B
assign operand_A_value = (operand_A_valid == 1) ? operand_A : 32'b0;
assign operand_B_value = (operand_B_valid == 1) ? operand_B : 32'b0;
                
assign effective_address = ((opcode == LOAD || opcode == STORE) && dest_reg_valid == 0) ? effective_address_init : 
                           ((opcode == LOAD || opcode == STORE) && dest_reg_valid == 1) ? effective_address_init + address_in :
                           address_in;

wire [RESERVATION_ENTRY_WIDTH-1:0] reservation_entry;
assign tag = {inst_valid, opcode, funct3, ordinal};
//assign op_A_loc = instruction[19:15]; 
//assign op_B_loc = instruction[24:20]; 
assign reservation_entry = {tag, inst_valid, opcode, operand_A_value, operand_B_value, op_A_loc, operand_A_valid, op_B_loc,
    operand_B_valid, effective_address, dest_reg_valid};

wire [ENTRY_OUT_WIDTH-1:0] entry_out;
assign entry_out = {tag, opcode, funct3, operand_A_value, operand_B_value, rd};
endmodule
